// Generated from /docs/schemas/schema-v1.sql â€” review types for precision
// PHASE 2: Replace src/services/authService.ts with Supabase wrapper - no other changes to callsites required.

import { z } from 'zod';

export const studentSchema = z.object({
  id: z.string().uuid(),
  matric_number: z.string(),
  first_name: z.string(),
  middle_name: z.string().optional(),
  last_name: z.string(),
  full_name: z.string().optional(), // Auto-generated by trigger
  email: z.string().email().optional(),
  parent_email: z.string().email().optional(),
  parent_phone: z.string().optional(),
  level_id: z.string().uuid(),
  gender: z.enum(['male', 'female']).optional(),
  status: z.enum(['active', 'inactive']).default('active'),
  created_at: z.string().refine(s => !isNaN(Date.parse(s)), { message: 'Invalid datetime' }),
  updated_at: z.string().refine(s => !isNaN(Date.parse(s)), { message: 'Invalid datetime' })
});

export const studentCreateSchema = studentSchema.omit({ 
  id: true, 
  full_name: true, 
  created_at: true, 
  updated_at: true 
});

export const studentUpdateSchema = studentCreateSchema.partial();

export type Student = z.infer<typeof studentSchema>;
export type StudentCreate = z.infer<typeof studentCreateSchema>;
export type StudentUpdate = z.infer<typeof studentUpdateSchema>;

// Validation test
if (require.main === module) {
  const testStudent = {
    id: '7a8b9cde-aaaa-bbbb-cccc-0123456789ab',
    matric_number: 'STU-001',
    first_name: 'Jane',
    last_name: 'Doe',
    level_id: '8c9d0eff-bbbb-cccc-dddd-0123456789cd',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  console.log('Student schema validation:', studentSchema.safeParse(testStudent));
}
